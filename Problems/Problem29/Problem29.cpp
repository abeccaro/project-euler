//
// Created by Alex Beccaro on 18/12/17.
//

#include <iostream>
#include <boost/unordered_set.hpp>
#include <boost/multiprecision/cpp_int.hpp>

using namespace std;
using namespace chrono;
using timer = high_resolution_clock;
using boost::multiprecision::cpp_int;
using boost::unordered_set;

using numtype = cpp_int;

/**
 * Specifies values, solves problem and outputs solution and calculation time.
 * @return The exit code
 */
int main() {
    const numtype MAX_BASE = 100;
    const numtype MAX_EXPONENT = 100;

    timer::time_point start = timer::now();

    unordered_set<numtype> powers;

    for (numtype a = 2; a <= MAX_BASE; a++)
        for (unsigned b = 2; b <= MAX_EXPONENT; b++)
            powers.insert((numtype) pow(a, b));

    unsigned long result = powers.size();

    double time = duration_cast<microseconds>(timer::now() - start).count() / 1000000.0;

    cout << "The number of distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ " << MAX_BASE
         << " and 2 ≤ b ≤ " << MAX_EXPONENT << " is " << result << endl;
    cout << "Calculation took " << time << " seconds" << endl;
}